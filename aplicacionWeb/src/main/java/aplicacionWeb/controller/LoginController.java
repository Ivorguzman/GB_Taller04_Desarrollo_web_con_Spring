package aplicacionWeb.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import aplicacionWeb.model.Credenciales;

@Controller
public class LoginController {



	@GetMapping("/")
	public String RedirectLogin() {

		return "redirect:/login";
	}



	@GetMapping("/login")
	public String Login(Model modelo, @RequestParam(name = "RpError", required = false) String error, @RequestParam(name = "RpLogout", required = false) String logout) {
		modelo.addAttribute("MaaError", error);
		modelo.addAttribute("MaaLogOut", logout);
		modelo.addAttribute("MaaCredenciales", new Credenciales());
		return "login.html";
	}
	/*
	 * M√©todo Login con varios par√°metros
	 * 
	 * - @GetMapping("/"): Esto es una anotaci√≥n que se utiliza en Spring Framework para mapear una
	 * solicitud HTTP GET a un m√©todo controlador. En este caso, el m√©todo Login se invocar√° cuando se
	 * realice una solicitud GET a la ra√≠z del contexto de la aplicaci√≥n (por ejemplo,
	 * http://localhost:8080/).
	 * 
	 * - public String Login(Model modelo, @RequestParam(name = "RpError", required = false) String
	 * error, @RequestParam(name = "RpLogout",required = false) String logout):
	 *
	 * - public: Indica que el m√©todo es accesible desde cualquier parte del c√≥digo.
	 * 
	 * - String: El tipo de dato que devuelve el m√©todo (en este caso, una cadena de texto).
	 *
	 * - Login: El nombre del m√©todo.
	 * 
	 * - Model modelo: Un par√°metro de tipo Model, que se utiliza para pasar datos entre el controlador
	 * y la vista (plantilla HTML).
	 * 
	 * - @RequestParam(name = "RpError", required = false) String error: Aqu√≠ se utiliza la
	 * anotaci√≥n @RequestParam para obtener un par√°metro de la solicitud HTTP. En este caso, se espera
	 * un par√°metro llamado RpError. Si no se proporciona, el valor ser√° null.
	 * 
	 * - @RequestParam(name = "RpLogout",required = false) String logout: Similar al anterior, se espera
	 * un par√°metro llamado RpLogout. Si no se proporciona, el valor tambi√©n ser√° null.
	 * 
	 * - modelo.addAttribute("MaaError", error);: Aqu√≠ se agrega un atributo llamado MaaError al modelo.
	 * El valor de este atributo ser√° el valor del par√°metro error que se obtiene de la solicitud.
	 *
	 * - modelo.addAttribute("MaaLogOut", logout);: Similar al anterior, se agrega un atributo llamado
	 * MaaLogOut al modelo con el valor del par√°metro logout.
	 * 
	 * - modelo.addAttribute("MaaCredenciales", new Credenciales());: Se agrega un atributo llamado
	 * MaaCredenciales al modelo, y se le asigna una nueva instancia de la clase Credenciales.
	 * En resumen, el m√©todo Login se encarga de manejar las solicitudes GET a la ra√≠z de la aplicaci√≥n,
	 * y utiliza los par√°metros RpError y RpLogout para agregar atributos al modelo. Estos atributos
	 * luego pueden ser utilizados en la vista (archivo HTML) para mostrar informaci√≥n al usuario.
	 * 
	 * 
	 * Podr√≠an considerarse como metadatos en el contexto de programaci√≥n:
	 * 
	 * - Nombres de par√°metros y atributos: Los nombres como "RpError", "RpLogout", "MaaError",
	 * "MaaLogOut", y "MaaCredenciales" son metadatos. Estos nombres describen la funci√≥n o el prop√≥sito
	 * de los par√°metros y atributos en el m√©todo Login.
	 * 
	 * - Comentarios: Aunque no est√°n presentes en el c√≥digo que proporcionaste, los comentarios tambi√©n
	 * pueden considerarse metadatos. Proporcionan informaci√≥n adicional sobre el c√≥digo y su
	 * funcionamiento.
	 * 
	 * En resumen, aunque no hay metadatos expl√≠citos en el c√≥digo, los nombres de los par√°metros y
	 * atributos act√∫an como metadatos al describir su funci√≥n y contexto. üòä
	 * 
	 */




	@PostMapping("/check")
	public String Check(@ModelAttribute Credenciales credenciales) {

		// Logica para validar el usuario con parametyro de error
		if (credenciales.getNombre().equals("ivor") && credenciales.getPass().equals("")){
			return "redirect:/usuarios/list";
		}
		return "redirect:/login?RpError";

		/*
		 * El m√©todo Check tiene la anotaci√≥n @PostMapping("/check"), lo que significa que se encarga de
		 * manejar las peticiones HTTP POST que llegan a la URL "/check". Esta anotaci√≥n es una forma
		 * abreviada de @RequestMapping(method = RequestMethod.POST, value = "/check"), que indica el m√©todo
		 * y la ruta de la petici√≥n.
		 * 
		 * El m√©todo Check tiene un par√°metro llamado credenciales, que es de tipo Credenciales. Este
		 * par√°metro tiene la anotaci√≥n @ModelAttribute, lo que significa que se vincula con un atributo del
		 * modelo que se llama igual.
		 * 
		 * El modelo es un objeto que contiene los datos que se quieren mostrar en la vista web.
		 *
		 * La anotaci√≥n @ModelAttribute permite obtener los datos del modelo o crearlos si
		 * no existen, y rellenar sus campos con los valores que coincidan con los nombres de los par√°metros
		 * de la petici√≥n. En este caso, se supone que la petici√≥n POST env√≠a los datos de las credenciales
		 * de un usuario, como el nombre y la contrase√±a, y que la clase Credenciales tiene esos campos
		 *
		 * El m√©todo Check devuelve una cadena de texto que empieza por "redirect:", lo que significa que se
		 * trata de una redirecci√≥n a otra URL. La URL a la que se redirige es "/login?RpError", que es la
		 * p√°gina de inicio de sesi√≥n con mensaje de error. No se especifica el motivo del
		 * error.
		 */

	}




}
